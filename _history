{"entries":[{"timestamp":1757290123648,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":21,"diffs":[[1,""]]},{"start1":1,"length1":81,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":229,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1757290658402,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"from microbit　import\n"]]},{"start1":22,"length1":0,"diffs":[[1,"while True:\n    display.show(Image.HEART)\nsleep(1000)\ndisplay.clear()\nsleep(1000)"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":202,"length1":39,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":229,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"added","filename":"main.py","value":"import sounddevice as sd\nimport numpy as np\nimport torchaudio\nimport torch\nimport os\nimport time\nfrom transformers import pipeline\n\nSAMPLE_RATE = 16000  # サンプリングレート\nDURATION = 3         # 1回あたりの録音時間（秒）\nOUTPUT_FILE = \"output.wav\"  # 一時保存用\nMODEL = \"openai/whisper-small\"\nLANGUAGE = \"english\"   # 小文字推奨\n\ndevice = 0 if torch.cuda.is_available() else -1\nprint(\"使用デバイス:\", \"cuda\" if device == 0 else \"cpu\")\n\npipe = pipeline(\n    \"automatic-speech-recognition\",\n    model=MODEL,\n    device=device\n)\n\n\ndef record_audio(filename=OUTPUT_FILE, duration=DURATION, samplerate=SAMPLE_RATE):\n\n    print(\"録音中...\")\n    audio = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=1, dtype='float32')\n    sd.wait()\n    audio_tensor = torch.from_numpy(audio.T)\n    torchaudio.save(filename, audio_tensor, samplerate)\n    print(\"録音終了。\")\n\n\ndef recognize_and_control(filename=OUTPUT_FILE):\n    result = pipe(\n        filename,\n        generate_kwargs={\n            \"language\": LANGUAGE,\n            \"task\": \"transcribe\"\n        }\n    )\n    text = result[\"text\"].strip().lower()\n    print(\"認識結果:\", text)\n\n    if text in [\" go\", \" go.\"]:\n        print(\"➡ モーター回る\")\n    elif text in [\"stop\", \"stop.\"]:\n        print(\"モーター止まる\")\n    else:\n        print(\"miss\")\n\n\ndef main_loop():\n    print(\"リアルタイム音声認識開始 \")\n    try:\n        while True:\n            record_audio()\n            recognize_and_control()\n            time.sleep(0.1)\n    except KeyboardInterrupt:\n        print(\"終了しました\")\n\nif __name__ == \"__main__\":\n    main_loop()\n"}]},{"timestamp":1757290873642,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]}]},{"timestamp":1757291928435,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":248,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1757290123647,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"kakenn\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1757291928435,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","main.py":"import sounddevice as sd\nimport numpy as np\nimport torchaudio\nimport torch\nimport os\nimport time\nfrom transformers import pipeline\n\nSAMPLE_RATE = 16000  # サンプリングレート\nDURATION = 3         # 1回あたりの録音時間（秒）\nOUTPUT_FILE = \"output.wav\"  # 一時保存用\nMODEL = \"openai/whisper-small\"\nLANGUAGE = \"english\"   # 小文字推奨\n\ndevice = 0 if torch.cuda.is_available() else -1\nprint(\"使用デバイス:\", \"cuda\" if device == 0 else \"cpu\")\n\npipe = pipeline(\n    \"automatic-speech-recognition\",\n    model=MODEL,\n    device=device\n)\n\n\ndef record_audio(filename=OUTPUT_FILE, duration=DURATION, samplerate=SAMPLE_RATE):\n\n    print(\"録音中...\")\n    audio = sd.rec(int(duration * samplerate), samplerate=samplerate, channels=1, dtype='float32')\n    sd.wait()\n    audio_tensor = torch.from_numpy(audio.T)\n    torchaudio.save(filename, audio_tensor, samplerate)\n    print(\"録音終了。\")\n\n\ndef recognize_and_control(filename=OUTPUT_FILE):\n    result = pipe(\n        filename,\n        generate_kwargs={\n            \"language\": LANGUAGE,\n            \"task\": \"transcribe\"\n        }\n    )\n    text = result[\"text\"].strip().lower()\n    print(\"認識結果:\", text)\n\n    if text in [\" go\", \" go.\"]:\n        print(\"➡ モーター回る\")\n    elif text in [\"stop\", \"stop.\"]:\n        print(\"モーター止まる\")\n    else:\n        print(\"miss\")\n\n\ndef main_loop():\n    print(\"リアルタイム音声認識開始 \")\n    try:\n        while True:\n            record_audio()\n            recognize_and_control()\n            time.sleep(0.1)\n    except KeyboardInterrupt:\n        print(\"終了しました\")\n\nif __name__ == \"__main__\":\n    main_loop()\n","pxt.json":"{\n    \"name\": \"kakenn\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}}],"shares":[],"lastSaveTime":1757291928440}